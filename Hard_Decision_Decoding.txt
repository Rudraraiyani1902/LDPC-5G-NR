QDbaseGraph5GNR = 'NR_2_6_52'; 
codeRates = [1/4, 1/3, 1/2, 3/5];

[B, Hfull, z] = nrldpc_Hmatrix(QDbaseGraph5GNR);
[mb, nb] = size(B); 
kb = nb - mb; 

EbNodB = 0:0.5:10;
Nsim = 1000;     
maxItr = 20;  

figure;
hold on;

for i = 1:length(codeRates)
    codeRate = codeRates(i);
    kNumInfoBits = kb * z;
    k_pc = kb - 2;
    nbRM = ceil(k_pc / codeRate) + 2;
    nBlockLength = nbRM * z;

    H = Hfull(:, 1:nBlockLength); 
    nChecksNotPunctured = mb*z - nb*z + nBlockLength;
    H = H(1:nChecksNotPunctured, :); 

    [u, n] = size(H);
    k = n - u;

    vn2cn = cell(1, n);
    for l = 1:n
        vn2cn{l} = find(H(:, l))';
    end

    cn2vn = cell(1, u);
    for l = 1:u
        cn2vn{l} = find(H(l, :));
    end

    plotvec = zeros(1, length(EbNodB));

    for idx = 1:length(EbNodB)
        jEb = EbNodB(idx);
        EbNo = 10^(jEb/10);
        sigma = sqrt(1 / (2 * codeRate * EbNo));
        errors = 0;

        for NsimIdx = 1:Nsim
            b = randi([0 1], [kNumInfoBits 1]);
            c = nrldpc_encode(B, z, b');
            c = c(1:nBlockLength)';

            s = 1 - 2 * c;                       
            r = s + sigma * randn(nBlockLength, 1); 
            r_hard = (r < 0);                    
            VN = r_hard;    

            msg_CN_2_VN = cell(1, n);           

            for itr = 1:maxItr
                if itr == 1
                    for i = 1:u
                        sumxor = mod(sum(VN(cn2vn{i})), 2);
                        for j = 1:length(cn2vn{i})
                            idx_vn = cn2vn{i}(j);
                            tempxor = mod(sumxor + VN(idx_vn), 2);
                            msg_CN_2_VN{idx_vn}(end + 1) = tempxor;
                        end
                    end
                else
                    msg_VN_2_CN = cell(1, u);
                    for i = 1:n
                        cnt = r_hard(i);
                        for j = 1:length(vn2cn{i})
                            cnt = cnt + msg_CN_2_VN{i}(j);
                        end
                        for j = 1:length(vn2cn{i})
                            tempcnt = cnt - msg_CN_2_VN{i}(j);
                            msg_VN_2_CN{vn2cn{i}(j)}(end+1) = double(tempcnt > (length(vn2cn{i}) / 2));
                        end
                    end

                    tempVN = zeros(1, n);
                    for i = 1:n
                        cnt1 = r_hard(i);
                        for j = 1:length(vn2cn{i})
                            cnt1 = cnt1 + msg_CN_2_VN{i}(j);
                        end
                        tempVN(i) = double(cnt1 > ((length(vn2cn{i}) + 1)/2));
                    end

                    if isequal(tempVN, VN)
                        break;
                    end

                    VN = tempVN;

                    msg_CN_2_VN = cell(1, n);
                    for i = 1:u
                        sumxor = mod(sum(msg_VN_2_CN{i}), 2);
                        for j = 1:length(cn2vn{i})
                            idx_vn = cn2vn{i}(j);
                            tempxor = mod(sumxor + msg_VN_2_CN{i}(j), 2);
                            msg_CN_2_VN{idx_vn}(end + 1) = tempxor;
                        end
                    end
                end
            end

            decoded = VN(1:kNumInfoBits);
            errors = errors + sum(decoded ~= b');
        end
        
        
        plotvec(idx) = errors / (Nsim * kNumInfoBits);
        fprintf('Rate %.2f | Eb/No = %.1f dB | BER = %.5f\n', codeRate, jEb, plotvec(idx));
    end

    semilogy(EbNodB, plotvec, 'LineWidth', 2);
end

legend('Rate 1/4', 'Rate 1/3', 'Rate 1/2', 'Rate 3/5', 'Location', 'SouthWest');
xlabel('Eb/No (dB)');
ylabel('Bit Error Rate (BER)');
title('5G NR LDPC Hard-Decision Decoding using Tanner Graph (Nsim=1000)');
grid on;

function [B,H,z] = nrldpc_Hmatrix(BG)
    load(sprintf('%s.txt', BG), BG);
    B = eval(BG);
    [mb, nb] = size(B);
    z = 52;
    H = zeros(mb*z, nb*z);
    Iz = eye(z); I0 = zeros(z);
    for kk = 1:mb
        tmpvecR = (kk-1)*z + (1:z);
        for kk1 = 1:nb
            tmpvecC = (kk1-1)*z + (1:z);
            if B(kk, kk1) == -1
                H(tmpvecR, tmpvecC) = I0;
            else
                H(tmpvecR, tmpvecC) = circshift(Iz, -B(kk, kk1));
            end
        end
    end
end

function cword = nrldpc_encode(B,z,msg)
    [m,n] = size(B);
    cword = zeros(1,n*z);
    cword(1:(n-m)*z) = msg;
    temp = zeros(1,z);

    for i = 1:4
        for j = 1:n-m
            temp = mod(temp + mul_sh(msg((j-1)*z+1:j*z), B(i,j)), 2);
        end
    end

    p1_sh = B(2,n-m+1);
    if p1_sh == -1
        p1_sh = B(3,n-m+1);
    end
    cword((n-m)*z+1:(n-m+1)*z) = mul_sh(temp, z - p1_sh);

    for i = 1:3
        temp = zeros(1,z);
        for j = 1:n-m+i
            temp = mod(temp + mul_sh(cword((j-1)*z+1:j*z), B(i,j)), 2);
        end
        cword((n-m+i)*z+1:(n-m+i+1)*z) = temp;
    end

    for i = 5:m
        temp = zeros(1,z);
        for j = 1:n-m+4
            temp = mod(temp + mul_sh(cword((j-1)*z+1:j*z), B(i,j)), 2);
        end
        cword((n-m+i-1)*z+1:(n-m+i)*z) = temp;
    end
end

function y = mul_sh(x,k)
    if k == -1
        y = zeros(1,length(x));
    else
        y = [x(k+1:end), x(1:k)];
    end
end
